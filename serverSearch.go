package main

import (
	"encoding/json"
	"fmt"
	"math/rand"
	"strings"
	"time"
)

type ServerSearchPayload struct {
	Command string `json:"command"`
	Answer  int    `json:"num"`
	Step    int    `json:"step"`
	Data    []int  `json:"data"`
}

type ServerSearchAnswer struct {
	Message  string
	Variants []string
	Checker  func(answer int, s *RustServerInfo) bool
}

var ServerSearchAnswers = [...]ServerSearchAnswer{
	{Message: "–ö–∞–∫–æ–≥–æ –∂–∞–Ω—Ä–∞ —Å–µ—Ä–≤–µ—Ä —Ç—ã —Ö–æ—á–µ—à—å?", Variants: []string{"–ú–æ–¥—ã", "–ö–ª–∞—Å—Å–∏–∫–∞", "–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ"},
		Checker: func(answer int, s *RustServerInfo) bool {
			return answer == s.Rate
		}},
	{Message: "–ö–∞–∫–∏–µ —Ä–µ–π—Ç—ã —Ç—ã —Ö–æ—á–µ—à—å?", Variants: []string{"x1 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç  –∫–ª–∞—Å—Å–∏–∫–∏)", "x2 - x3 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç –º–æ–¥–æ–≤)", "x4 - x9 (–±—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞)", "x10 –∏ –≤—ã—à–µ"},
		Checker: func(answer int, s *RustServerInfo) bool {
			switch answer {
			case 1:
				return s.Rate == 1
			case 2:
				return s.Rate >= 2 && s.Rate <= 3
			case 3:
				return s.Rate >= 4 && s.Rate <= 9
			case 4:
				return s.Rate >= 10
			default:
				return false
			}
		}},
	{Message: "–°–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ?", Variants: []string{"1", "2 - 3", "4 - 5", "6 –∏ –±–æ–ª–µ–µ (–∫–ª–∞–Ω)"},
		Checker: func(answer int, s *RustServerInfo) bool {
			if s.Genre == GenreClassic && s.MaxTeam == 100 { // –ù–∞ –∫–ª–∞—Å—Å–∏–∫–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
				return true
			}

			switch answer {
			case 1:
				return s.MaxTeam == 1
			case 2:
				return s.MaxTeam >= 2 && s.MaxTeam <= 3
			case 3:
				return s.MaxTeam >= 4 && s.MaxTeam <= 5
			case 4:
				return s.MaxTeam >= 6
			default:
				return false
			}
		}},
	{Message: "–ö–∞–∫–∞—è –∫–∞—Ä—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ?", Variants: []string{"–õ—é–±–∞—è", "Procedural", "Barren", "Hapis Island"},
		Checker: func(answer int, s *RustServerInfo) bool {
			switch answer {
			case 1:
				return true
			case 2:
				return s.Map[0] == 'P'
			case 3:
				return s.Map[0] == 'B'
			case 4:
				return s.Map[0] == 'H'
			default:
				return false
			}
		}},
	{Message: "–ù–∞—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–π–ø?", Variants: []string{"–ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã", "–ö–∞–∂–¥—ã–µ 3-5 –¥–Ω–µ–π", "–ö–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π", "–ö–∞–∂–¥—ã–µ 14 –¥–Ω–µ–π"},
		Checker: func(answer int, s *RustServerInfo) bool {
			switch answer {
			case 1:
				return true
			case 2:
				return s.WipeInterval <= 5
			case 3:
				return s.WipeInterval == 7
			case 4:
				return s.WipeInterval == 14
			default:
				return false
			}
		}},
}

func (server *RustServerInfo) CheckParams(genre byte, params ...int) bool {
	if server.MaxPlayers == 0 { // –°–µ—Ä–≤–µ—Ä –æ—Ñ—Ñ–ª–∞–π–Ω
		return false
	}

	if genre != server.Genre {
		return false
	}

	if genre == GenreFun {
		return true
	}

	for k, v := range params {
		if !ServerSearchAnswers[k+1].Checker(v, server) {
			return false
		}
	}

	return true
}

func CommandRustFind(vk *Vk, object *LongPollMessage) {
	kb := VkKeyboard{OneTime: false}

	payload := new(ServerSearchPayload)
	if err := json.Unmarshal([]byte(object.Payload), payload); err != nil {
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —ç—Ç–∞–ø–∞

	step := payload.Step

	if step < 0 || step > len(ServerSearchAnswers) {
		return
	}

	// –ï—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç (—Ç.–µ –Ω–µ –ø–µ—Ä–≤—ã–π –≤—ã–≤–æ–¥ –º–µ–Ω—é)

	if payload.Answer != 0 && step != len(ServerSearchAnswers) {
		if payload.Answer < 1 || payload.Answer > len(ServerSearchAnswers[step].Variants) {
			return
		}

		payload.Data = append(payload.Data, payload.Answer)

		payload.Step++
		step++

		if step == 1 {
			if payload.Answer == 2 { // –ö–ª–∞—Å—Å–∏–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ø –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–æ–≤
				payload.Data = append(payload.Data, 1)
				payload.Step++
				step++
			} else if payload.Answer == 3 { // –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã
				payload.Data = append(payload.Data, 0, 0, 0, 0)
				payload.Step = len(ServerSearchAnswers)
				step = payload.Step
			}
		}
	}

	// –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –ò—â–µ–º —Å–µ—Ä–≤–µ—Ä

	if step == len(ServerSearchAnswers) {

		d := payload.Data
		if len(d) != 5 {
			return
		}

		good := make([]*RustServerInfo, 0, 30)

		for i, j := 0, len(RustServers); i < j; i++ {
			v := &RustServers[i]

			if v.CheckParams(byte(d[0]), d[1:]...) {
				good = append(good, v)
			}
		}

		resp := strings.Builder{}
		if len(good) != 0 {
			// –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞

			rand.Shuffle(len(good), func(i, j int) { good[i], good[j] = good[j], good[i] })

			// –°—Ç–∞—Ä–∞–µ–º—Å—è –≤—ã–≤–µ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤

			unique := make(map[uint32]bool)
			count := len(good)

			gFinal := [3]*RustServerInfo{} // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫. –¢—Ä–∏ —Å–µ—Ä–≤–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã
			fPtr := 0                      // –°—á–µ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞

			for i := 0; i < count; i++ {
				s := good[i]
				if _, ok := unique[s.Key]; !ok {
					unique[s.Key] = true // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω

					// "–£–¥–∞–ª—è–µ–º" —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å—Ä–µ–∑–∞
					good[i], good[count-1] = good[count-1], good[i]
					count--

					// –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
					gFinal[fPtr] = s
					fPtr++
					if fPtr == 3 {
						break
					}
				}
			}

			for ; fPtr < 3; fPtr++ { // todo: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ " fPtr++ < 3 " ?
				if count == 0 {
					break
				}
				j := rand.Intn(count)

				gFinal[fPtr] = good[j]

				// "–£–¥–∞–ª—è–µ–º" —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å—Ä–µ–∑–∞. –ß—Ç–æ–±—ã –≤ –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ä–∞–∑ –Ω–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ç –∂–µ
				good[j], good[count-1] = good[count-1], good[j]
				count--
			}

			// –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–∞

			resp.WriteString("üîç –ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–∞–π–¥–µ–Ω—ã —Å–µ—Ä–≤–µ—Ä–∞:\n\n")

			for i := 0; i < fPtr; i++ {
				j := gFinal[i]
				resp.WriteString(fmt.Sprintf("‚ñ∂ connect %s\n%s\n–û–Ω–ª–∞–π–Ω %d / %d -- –í–∞–π–ø %s\n\n",
					j.Address, j.Hostname, j.Players, j.MaxPlayers, time.Unix(j.Wiped, 0).Format("02.01 –≤ 15:04")))
			}
		} else {
			resp.WriteString("üò¢ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
		}

		if len(good) > 3 {
			pl, _ := json.Marshal(payload)
			kb.AddRow(kb.TxtBtn("üîÑ –ü–æ–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–µ—Ä–∞", "secondary", string(pl)))
		}
		kb.AddRow(kb.TxtBtn("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "secondary", `{"command":"rustFind"}`))
		kb.AddRow(kb.TxtBtn("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", "positive", `{"command":"start"}`))
		vk.SendKeyboard(object.FromId, resp.String(), &kb)
		return
	}

	// –í—ã–≤–æ–¥–∏–º –æ—á–µ—Ä–µ–¥–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å

	count := len(ServerSearchAnswers[step].Variants)
	buttons := make([]VkButton, 0, count)
	buttonExists := make([]bool, count)
	totalExists := 0

	if step != 0 {
		tmp := append(payload.Data[1:], 0)
	buttonExistsFor:
		for i, j := 0, len(RustServers); i < j; i++ {

			/*if !RustServers[i].CheckParams(byte(payload.Data[0]), payload.Data[1:]...) {
				continue
			}*/

			// todo: –≤–µ—Ä–æ—è—Ç–Ω–æ, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—É–¥–µ—Ç –æ–±—â–µ–≥–æ —á–µ–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —á–µ–∫–∞ —Ç–æ–ª—å–∫–æ k + 1 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–±—É–¥—É—â–µ–≥–æ)

			// tmp := append(payload.Data[1:], 0)
			for k := 0; k < count; k++ {
				tmp[len(tmp)-1] = k + 1
				if !buttonExists[k] && RustServers[i].CheckParams(byte(payload.Data[0]), tmp...) {
					buttonExists[k] = true
					totalExists++

					if totalExists == count {
						break buttonExistsFor
					}
				}
			}
		}
	} else {
		for i := 0; i < count; i++ {
			buttonExists[i] = true
		}
	}

	for i := 0; i < count; i++ {
		if buttonExists[i] {
			payload.Answer = i + 1
			pl, _ := json.Marshal(payload)

			buttons = append(buttons, kb.TxtBtn(ServerSearchAnswers[step].Variants[i], "secondary", string(pl)))
		}
	}

	count = len(buttons)
	switch {
	case count%2 == 0:
		for i := 0; i < count; i += 2 {
			kb.AddRow(buttons[i], buttons[i+1])
		}
	default:
		for i := 0; i < count; i++ {
			kb.AddRow(buttons[i])
		}
	}

	kb.AddRow(kb.TxtBtn("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", "positive", `{"command":"start"}`))
	vk.SendKeyboard(object.FromId, ServerSearchAnswers[step].Message, &kb)
}
