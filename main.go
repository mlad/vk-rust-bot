package main

/*

TODO:
-- –ú—å—é—Ç–µ–∫—Å—ã –¥–ª—è –∞–ø–¥–µ–π—Ç–µ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤

*/

import (
	"encoding/json"
	"github.com/tidwall/gjson"
	"log"
	"math/rand"
	"strings"
	"time"
)

var VkCommands map[string]func(vk *Vk, object *LongPollMessage)

func onLongPollMessage(vk *Vk, object gjson.Result) {
	// todo: –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–∞—à—É —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
	msg := new(LongPollMessage)
	_ = json.Unmarshal([]byte(object.Raw), msg)

	Command := gjson.Get(msg.Payload, "command")
	if Command.Exists() {
		if event, ok := VkCommands[Command.String()]; ok {
			event(vk, msg)
		}

		return
	}

	if strings.EqualFold(msg.Text, "—Å—Ç–∞—Ä—Ç") || strings.EqualFold(msg.Text, "–ø—Ä–∏–≤–µ—Ç") || strings.EqualFold(msg.Text, "–Ω–∞—á–∞—Ç—å") {
		CommandStart(vk, msg)
	} else {
		vk.SendMessage(msg.FromId, "–ü—Ä–∏–≤–µ—Ç! üëã\n–≠—Ç–æ –±–æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ LIVE RUST\n\n‚ùó –ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç \"—Å—Ç–∞—Ä—Ç\"")
	}
}

func CommandStart(vk *Vk, object *LongPollMessage) {
	kb := VkKeyboard{OneTime: false}

	kb.AddRow(kb.TxtBtn("üîç –ü–æ–¥–æ–±—Ä–∞—Ç—å Rust —Å–µ—Ä–≤–µ—Ä", "secondary", `{"command":"rustFind"}`))
	kb.AddRow(kb.TxtBtn("üì£ –†–µ–∫–ª–∞–º–∞ –≤ LIVE RUST", "secondary", `{"command":"ads"}`))

	vk.SendKeyboard(object.FromId, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é", &kb)
}

func CommandAds(vk *Vk, object *LongPollMessage) {
	vk.SendMessage(object.FromId, "–ü–æ —Ä–µ–∫–ª–∞–º–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ [liveadv|LIVE AD]")
}

func main() {
	rand.Seed(time.Now().UnixNano())

	cfg, err := readConfig(configFilePath)
	if err != nil {
		log.Fatalf("Read config error: %v\n", err)
	}

	LoadRustServers()

	VkCommands = map[string]func(vk *Vk, object *LongPollMessage){
		"start":    CommandStart,
		"rustFind": CommandRustFind,
		"ads":      CommandAds,
	}

	vk := Vk{accessToken: cfg.Token, version: cfg.Version}
	vk.GroupPoll(cfg.GroupId, onLongPollMessage)

	RunApiServer()

	ch := make(chan int)
	<-ch
}
